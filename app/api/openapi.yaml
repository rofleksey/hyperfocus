openapi: '3.0.4'
info:
  contact:
    name: 'hyperfocus'
  title: 'hyperfocus API'
  version: '1.0.0'
servers:
  - description: 'API'
    url: '/v1'
security:
  - Permissions: []

x-errors: &commonErrors
  '400':
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/General'
    description: 'Bad Request'
  '401':
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/General'
    description: 'Unauthorized'
  '403':
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/General'
    description: 'Forbidden'
  '404':
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/General'
    description: 'Not Found'
  '500':
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/General'
    description: 'Internal Server Error'

paths:
  /healthz:
    get:
      summary: 'Health check'
      operationId: 'healthCheck'
      responses:
        '200':
          description: 'Service is healthy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/General'
          description: 'Service is unhealthy'

  /auth/login:
    post:
      summary: 'Login'
      operationId: 'login'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'

  /auth/logout:
    post:
      summary: 'Logout'
      operationId: 'logout'
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'

  /auth/me:
    get:
      summary: 'Get my user'
      operationId: 'getMyself'
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMyselfResponse'

  /settings:
    get:
      summary: 'Get settings'
      operationId: 'getSettings'
      security:
        - Permissions:
            - "settings:edit"
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
    post:
      summary: 'Set settings'
      operationId: 'setSettings'
      security:
        - Permissions:
            - "settings:edit"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'

  /users:
    post:
      summary: 'Search users'
      operationId: 'searchUsers'
      security:
        - Permissions:
            - "user:list"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

  /user/{username}:
    parameters:
      - in: 'path'
        name: 'username'
        required: true
        schema:
          type: string
    get:
      summary: 'Get user'
      operationId: 'getUser'
      security:
        - Permissions:
            - "user:list"
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: 'Edit user'
      operationId: 'editUser'
      security:
        - Permissions:
            - "user:create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserRequest'
        required: true
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'
    delete:
      summary: 'Delete a user'
      operationId: 'deleteUser'
      security:
        - Permissions:
            - "user:delete"
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'

  /user:
    post:
      summary: 'Create a user'
      operationId: 'createUser'
      security:
        - Permissions:
          - "user:create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        <<: *commonErrors
        '200':
          description: 'Success'

components:
  securitySchemes:
    Permissions:
      bearerFormat: 'JWT'
      scheme: 'bearer'
      type: 'http'
  schemas:
    General:
      properties:
        error:
          type: boolean
        msg:
          type: string
        statusCode:
          type: 'integer'
          x-omitempty: true
      required:
        - error
        - msg
        - statusCode
      type: object

    LoginRequest:
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      type: object

    LoginResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    Permission:
      type: string
      enum:
        - "user:list"
        - "user:create"
        - "user:roles"
        - "user:delete"
        - "settings:edit"
        - "authenticated"

    User:
      type: object
      properties:
        username:
          type: string
        created:
          type: string
          format: date-time
        roles:
          type: array
          items:
            type: string
      required:
        - username
        - created
        - roles

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
      required:
        - username
        - password
        - roles

    HealthResponse:
      type: object
      properties:
        version:
          type: string
        buildDate:
          type: string
      required:
        - version
        - buildDate

    GetMyselfResponse:
      type: object
      properties:
        username:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
      required:
        - username
        - permissions

    EditUserRequest:
      type: object
      properties:
        password:
          type: string
        roles:
          type: array
          items:
            type: string
      required:
        - roles

    SearchRequest:
      type: object
      properties:
        query:
          type: string
        offset:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 0
          maximum: 100
      required:
        - query
        - offset
        - limit

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalCount:
          type: integer
      required:
        - users
        - totalCount

    Settings:
      type: object
      properties:
        apiKey:
          type: string
      required:
        - apiKey

    WsMessagesChangedMessage:
      properties:
        event:
          enum:
            - 'messages_changed'
          type: 'string'
        id:
          type: 'string'
          x-oapi-codegen-extra-tags:
            exhaustruct: 'optional'
      required:
        - 'event'
        - 'id'
      type: 'object'

    WsMessage:
      discriminator:
        mapping:
          messages_changed: '#/components/schemas/WsMessagesChangedMessage'
        propertyName: 'event'
      oneOf:
        - $ref: '#/components/schemas/WsMessagesChangedMessage'
      properties:
        event:
          type: 'string'
        id:
          type: 'string'
          x-oapi-codegen-extra-tags:
            exhaustruct: 'optional'
      required:
        - 'event'
        - 'id'
      type: 'object'
